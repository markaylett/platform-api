// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MDSNAPSHOTL2_REACTIVEMARKETS_PAPI_H_
#define FLATBUFFERS_GENERATED_MDSNAPSHOTL2_REACTIVEMARKETS_PAPI_H_

#include "flatbuffers/flatbuffers.h"

#include "Enum_generated.h"

namespace reactivemarkets {
namespace papi {

struct MDLevel2;

struct MDSnapshotL2;
struct MDSnapshotL2Builder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) MDLevel2 FLATBUFFERS_FINAL_CLASS {
 private:
  double qty_;
  double price_;

 public:
  MDLevel2() {
    memset(static_cast<void *>(this), 0, sizeof(MDLevel2));
  }
  MDLevel2(double _qty, double _price)
      : qty_(flatbuffers::EndianScalar(_qty)),
        price_(flatbuffers::EndianScalar(_price)) {
  }
  double qty() const {
    return flatbuffers::EndianScalar(qty_);
  }
  double price() const {
    return flatbuffers::EndianScalar(price_);
  }
};
FLATBUFFERS_STRUCT_END(MDLevel2, 16);

struct MDSnapshotL2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MDSnapshotL2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCE_TS = 4,
    VT_SOURCE = 6,
    VT_MARKET = 8,
    VT_FEED_ID = 10,
    VT_ID = 12,
    VT_DEPTH = 14,
    VT_FLAGS = 16,
    VT_BID_SIDE = 18,
    VT_OFFER_SIDE = 20
  };
  int64_t source_ts() const {
    return GetField<int64_t>(VT_SOURCE_TS, 0);
  }
  const flatbuffers::String *source() const {
    return GetPointer<const flatbuffers::String *>(VT_SOURCE);
  }
  const flatbuffers::String *market() const {
    return GetPointer<const flatbuffers::String *>(VT_MARKET);
  }
  int32_t feed_id() const {
    return GetField<int32_t>(VT_FEED_ID, 0);
  }
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 0);
  }
  int16_t depth() const {
    return GetField<int16_t>(VT_DEPTH, 0);
  }
  uint16_t flags() const {
    return GetField<uint16_t>(VT_FLAGS, 0);
  }
  const flatbuffers::Vector<const reactivemarkets::papi::MDLevel2 *> *bid_side() const {
    return GetPointer<const flatbuffers::Vector<const reactivemarkets::papi::MDLevel2 *> *>(VT_BID_SIDE);
  }
  const flatbuffers::Vector<const reactivemarkets::papi::MDLevel2 *> *offer_side() const {
    return GetPointer<const flatbuffers::Vector<const reactivemarkets::papi::MDLevel2 *> *>(VT_OFFER_SIDE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_SOURCE_TS) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffsetRequired(verifier, VT_MARKET) &&
           verifier.VerifyString(market()) &&
           VerifyField<int32_t>(verifier, VT_FEED_ID) &&
           VerifyField<int64_t>(verifier, VT_ID) &&
           VerifyField<int16_t>(verifier, VT_DEPTH) &&
           VerifyField<uint16_t>(verifier, VT_FLAGS) &&
           VerifyOffset(verifier, VT_BID_SIDE) &&
           verifier.VerifyVector(bid_side()) &&
           VerifyOffset(verifier, VT_OFFER_SIDE) &&
           verifier.VerifyVector(offer_side()) &&
           verifier.EndTable();
  }
};

struct MDSnapshotL2Builder {
  typedef MDSnapshotL2 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_source_ts(int64_t source_ts) {
    fbb_.AddElement<int64_t>(MDSnapshotL2::VT_SOURCE_TS, source_ts, 0);
  }
  void add_source(flatbuffers::Offset<flatbuffers::String> source) {
    fbb_.AddOffset(MDSnapshotL2::VT_SOURCE, source);
  }
  void add_market(flatbuffers::Offset<flatbuffers::String> market) {
    fbb_.AddOffset(MDSnapshotL2::VT_MARKET, market);
  }
  void add_feed_id(int32_t feed_id) {
    fbb_.AddElement<int32_t>(MDSnapshotL2::VT_FEED_ID, feed_id, 0);
  }
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(MDSnapshotL2::VT_ID, id, 0);
  }
  void add_depth(int16_t depth) {
    fbb_.AddElement<int16_t>(MDSnapshotL2::VT_DEPTH, depth, 0);
  }
  void add_flags(uint16_t flags) {
    fbb_.AddElement<uint16_t>(MDSnapshotL2::VT_FLAGS, flags, 0);
  }
  void add_bid_side(flatbuffers::Offset<flatbuffers::Vector<const reactivemarkets::papi::MDLevel2 *>> bid_side) {
    fbb_.AddOffset(MDSnapshotL2::VT_BID_SIDE, bid_side);
  }
  void add_offer_side(flatbuffers::Offset<flatbuffers::Vector<const reactivemarkets::papi::MDLevel2 *>> offer_side) {
    fbb_.AddOffset(MDSnapshotL2::VT_OFFER_SIDE, offer_side);
  }
  explicit MDSnapshotL2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MDSnapshotL2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MDSnapshotL2>(end);
    fbb_.Required(o, MDSnapshotL2::VT_MARKET);
    return o;
  }
};

inline flatbuffers::Offset<MDSnapshotL2> CreateMDSnapshotL2(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t source_ts = 0,
    flatbuffers::Offset<flatbuffers::String> source = 0,
    flatbuffers::Offset<flatbuffers::String> market = 0,
    int32_t feed_id = 0,
    int64_t id = 0,
    int16_t depth = 0,
    uint16_t flags = 0,
    flatbuffers::Offset<flatbuffers::Vector<const reactivemarkets::papi::MDLevel2 *>> bid_side = 0,
    flatbuffers::Offset<flatbuffers::Vector<const reactivemarkets::papi::MDLevel2 *>> offer_side = 0) {
  MDSnapshotL2Builder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_source_ts(source_ts);
  builder_.add_offer_side(offer_side);
  builder_.add_bid_side(bid_side);
  builder_.add_feed_id(feed_id);
  builder_.add_market(market);
  builder_.add_source(source);
  builder_.add_flags(flags);
  builder_.add_depth(depth);
  return builder_.Finish();
}

inline flatbuffers::Offset<MDSnapshotL2> CreateMDSnapshotL2Direct(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t source_ts = 0,
    const char *source = nullptr,
    const char *market = nullptr,
    int32_t feed_id = 0,
    int64_t id = 0,
    int16_t depth = 0,
    uint16_t flags = 0,
    const std::vector<reactivemarkets::papi::MDLevel2> *bid_side = nullptr,
    const std::vector<reactivemarkets::papi::MDLevel2> *offer_side = nullptr) {
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto market__ = market ? _fbb.CreateString(market) : 0;
  auto bid_side__ = bid_side ? _fbb.CreateVectorOfStructs<reactivemarkets::papi::MDLevel2>(*bid_side) : 0;
  auto offer_side__ = offer_side ? _fbb.CreateVectorOfStructs<reactivemarkets::papi::MDLevel2>(*offer_side) : 0;
  return reactivemarkets::papi::CreateMDSnapshotL2(
      _fbb,
      source_ts,
      source__,
      market__,
      feed_id,
      id,
      depth,
      flags,
      bid_side__,
      offer_side__);
}

}  // namespace papi
}  // namespace reactivemarkets

#endif  // FLATBUFFERS_GENERATED_MDSNAPSHOTL2_REACTIVEMARKETS_PAPI_H_
