// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package papi

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MDSnapshotL2 struct {
	_tab flatbuffers.Table
}

func GetRootAsMDSnapshotL2(buf []byte, offset flatbuffers.UOffsetT) *MDSnapshotL2 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MDSnapshotL2{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MDSnapshotL2) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MDSnapshotL2) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MDSnapshotL2) SourceTs() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MDSnapshotL2) MutateSourceTs(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *MDSnapshotL2) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MDSnapshotL2) Market() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MDSnapshotL2) FeedId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MDSnapshotL2) MutateFeedId(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *MDSnapshotL2) Id() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MDSnapshotL2) MutateId(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *MDSnapshotL2) Depth() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MDSnapshotL2) MutateDepth(n int16) bool {
	return rcv._tab.MutateInt16Slot(14, n)
}

func (rcv *MDSnapshotL2) Flags() uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetUint16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MDSnapshotL2) MutateFlags(n uint16) bool {
	return rcv._tab.MutateUint16Slot(16, n)
}

func (rcv *MDSnapshotL2) BidSide(obj *MDLevel2, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 16
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MDSnapshotL2) BidSideLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MDSnapshotL2) OfferSide(obj *MDLevel2, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 16
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MDSnapshotL2) OfferSideLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func MDSnapshotL2Start(builder *flatbuffers.Builder) {
	builder.StartObject(9)
}
func MDSnapshotL2AddSourceTs(builder *flatbuffers.Builder, sourceTs int64) {
	builder.PrependInt64Slot(0, sourceTs, 0)
}
func MDSnapshotL2AddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(source), 0)
}
func MDSnapshotL2AddMarket(builder *flatbuffers.Builder, market flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(market), 0)
}
func MDSnapshotL2AddFeedId(builder *flatbuffers.Builder, feedId int32) {
	builder.PrependInt32Slot(3, feedId, 0)
}
func MDSnapshotL2AddId(builder *flatbuffers.Builder, id int64) {
	builder.PrependInt64Slot(4, id, 0)
}
func MDSnapshotL2AddDepth(builder *flatbuffers.Builder, depth int16) {
	builder.PrependInt16Slot(5, depth, 0)
}
func MDSnapshotL2AddFlags(builder *flatbuffers.Builder, flags uint16) {
	builder.PrependUint16Slot(6, flags, 0)
}
func MDSnapshotL2AddBidSide(builder *flatbuffers.Builder, bidSide flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(bidSide), 0)
}
func MDSnapshotL2StartBidSideVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(16, numElems, 8)
}
func MDSnapshotL2AddOfferSide(builder *flatbuffers.Builder, offerSide flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(offerSide), 0)
}
func MDSnapshotL2StartOfferSideVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(16, numElems, 8)
}
func MDSnapshotL2End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
