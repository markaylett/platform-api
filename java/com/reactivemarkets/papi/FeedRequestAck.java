// automatically generated by the FlatBuffers compiler, do not modify

package com.reactivemarkets.papi;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FeedRequestAck extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static FeedRequestAck getRootAsFeedRequestAck(ByteBuffer _bb) { return getRootAsFeedRequestAck(_bb, new FeedRequestAck()); }
  public static FeedRequestAck getRootAsFeedRequestAck(ByteBuffer _bb, FeedRequestAck obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FeedRequestAck __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String reqId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reqIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer reqIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public int feedId() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createFeedRequestAck(FlatBufferBuilder builder,
      int req_idOffset,
      int feed_id) {
    builder.startTable(2);
    FeedRequestAck.addFeedId(builder, feed_id);
    FeedRequestAck.addReqId(builder, req_idOffset);
    return FeedRequestAck.endFeedRequestAck(builder);
  }

  public static void startFeedRequestAck(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addReqId(FlatBufferBuilder builder, int reqIdOffset) { builder.addOffset(0, reqIdOffset, 0); }
  public static void addFeedId(FlatBufferBuilder builder, int feedId) { builder.addInt(1, feedId, 0); }
  public static int endFeedRequestAck(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FeedRequestAck get(int j) { return get(new FeedRequestAck(), j); }
    public FeedRequestAck get(FeedRequestAck obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

