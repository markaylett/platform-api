// automatically generated by the FlatBuffers compiler, do not modify

import { flatbuffers } from "./flatbuffers"
import * as NS13482729303557618248 from "./PublicTrade_generated";
export namespace reactivemarkets.papi { 
export import PublicTrade = NS13482729303557618248.reactivemarkets.papi.PublicTrade;
}
import * as NS14459918997620524792 from "./FeedRequest_generated";
export namespace reactivemarkets.papi { 
export import FeedRequest = NS14459918997620524792.reactivemarkets.papi.FeedRequest;
}
import * as NS5976904099244326615 from "./FeedRequestAck_generated";
export namespace reactivemarkets.papi { 
export import FeedRequestAck = NS5976904099244326615.reactivemarkets.papi.FeedRequestAck;
}
import * as NS9014124594036430531 from "./FeedRequestReject_generated";
export namespace reactivemarkets.papi { 
export import FeedRequestReject = NS9014124594036430531.reactivemarkets.papi.FeedRequestReject;
}
import * as NS15334852805175805455 from "./SessionStatus_generated";
export namespace reactivemarkets.papi { 
export import SessionStatus = NS15334852805175805455.reactivemarkets.papi.SessionStatus;
}
import * as NS14859284212165380286 from "./MDSnapshotL2_generated";
export namespace reactivemarkets.papi { 
export import MDSnapshotL2 = NS14859284212165380286.reactivemarkets.papi.MDSnapshotL2;
}
/**
 * @enum {number}
 */
export namespace reactivemarkets.papi{
export enum Body{
  NONE= 0,
  FeedRequest= 1,
  FeedRequestAck= 2,
  FeedRequestReject= 3,
  MDSnapshotL2= 4,
  PublicTrade= 5,
  SessionStatus= 6
};

export function unionToBody(
  type: Body,
  accessor: (obj:reactivemarkets.papi.FeedRequest|reactivemarkets.papi.FeedRequestAck|reactivemarkets.papi.FeedRequestReject|reactivemarkets.papi.MDSnapshotL2|reactivemarkets.papi.PublicTrade|reactivemarkets.papi.SessionStatus) => reactivemarkets.papi.FeedRequest|reactivemarkets.papi.FeedRequestAck|reactivemarkets.papi.FeedRequestReject|reactivemarkets.papi.MDSnapshotL2|reactivemarkets.papi.PublicTrade|reactivemarkets.papi.SessionStatus|null
): reactivemarkets.papi.FeedRequest|reactivemarkets.papi.FeedRequestAck|reactivemarkets.papi.FeedRequestReject|reactivemarkets.papi.MDSnapshotL2|reactivemarkets.papi.PublicTrade|reactivemarkets.papi.SessionStatus|null {
  switch(reactivemarkets.papi.Body[type]) {
    case 'NONE': return null; 
    case 'FeedRequest': return accessor(new reactivemarkets.papi.FeedRequest())! as reactivemarkets.papi.FeedRequest;
    case 'FeedRequestAck': return accessor(new reactivemarkets.papi.FeedRequestAck())! as reactivemarkets.papi.FeedRequestAck;
    case 'FeedRequestReject': return accessor(new reactivemarkets.papi.FeedRequestReject())! as reactivemarkets.papi.FeedRequestReject;
    case 'MDSnapshotL2': return accessor(new reactivemarkets.papi.MDSnapshotL2())! as reactivemarkets.papi.MDSnapshotL2;
    case 'PublicTrade': return accessor(new reactivemarkets.papi.PublicTrade())! as reactivemarkets.papi.PublicTrade;
    case 'SessionStatus': return accessor(new reactivemarkets.papi.SessionStatus())! as reactivemarkets.papi.SessionStatus;
    default: return null;
  }
}

export function unionListToBody(
  type: Body, 
  accessor: (index: number, obj:reactivemarkets.papi.FeedRequest|reactivemarkets.papi.FeedRequestAck|reactivemarkets.papi.FeedRequestReject|reactivemarkets.papi.MDSnapshotL2|reactivemarkets.papi.PublicTrade|reactivemarkets.papi.SessionStatus) => reactivemarkets.papi.FeedRequest|reactivemarkets.papi.FeedRequestAck|reactivemarkets.papi.FeedRequestReject|reactivemarkets.papi.MDSnapshotL2|reactivemarkets.papi.PublicTrade|reactivemarkets.papi.SessionStatus|null, 
  index: number
): reactivemarkets.papi.FeedRequest|reactivemarkets.papi.FeedRequestAck|reactivemarkets.papi.FeedRequestReject|reactivemarkets.papi.MDSnapshotL2|reactivemarkets.papi.PublicTrade|reactivemarkets.papi.SessionStatus|null {
  switch(reactivemarkets.papi.Body[type]) {
    case 'NONE': return null; 
    case 'FeedRequest': return accessor(index, new reactivemarkets.papi.FeedRequest())! as reactivemarkets.papi.FeedRequest;
    case 'FeedRequestAck': return accessor(index, new reactivemarkets.papi.FeedRequestAck())! as reactivemarkets.papi.FeedRequestAck;
    case 'FeedRequestReject': return accessor(index, new reactivemarkets.papi.FeedRequestReject())! as reactivemarkets.papi.FeedRequestReject;
    case 'MDSnapshotL2': return accessor(index, new reactivemarkets.papi.MDSnapshotL2())! as reactivemarkets.papi.MDSnapshotL2;
    case 'PublicTrade': return accessor(index, new reactivemarkets.papi.PublicTrade())! as reactivemarkets.papi.PublicTrade;
    case 'SessionStatus': return accessor(index, new reactivemarkets.papi.SessionStatus())! as reactivemarkets.papi.SessionStatus;
    default: return null;
  }
}
}

/**
 * @constructor
 */
export namespace reactivemarkets.papi{
export class Message {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Message
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Message {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Message= obj
 * @returns Message
 */
static getRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Message= obj
 * @returns Message
 */
static getSizePrefixedRootAsMessage(bb:flatbuffers.ByteBuffer, obj?:Message):Message {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Message()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @returns boolean
 */
static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('RMF1');
};

/**
 * @returns flatbuffers.Long
 */
tts():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * @returns reactivemarkets.papi.Body
 */
bodyType():reactivemarkets.papi.Body {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : reactivemarkets.papi.Body.NONE;
};

/**
 * @param flatbuffers.Table obj
 * @returns ?flatbuffers.Table
 */
body<T extends flatbuffers.Table>(obj:T):T|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startMessage(builder:flatbuffers.Builder) {
  builder.startObject(3);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Long tts
 */
static addTts(builder:flatbuffers.Builder, tts:flatbuffers.Long) {
  builder.addFieldInt64(0, tts, builder.createLong(0, 0));
};

/**
 * @param flatbuffers.Builder builder
 * @param reactivemarkets.papi.Body bodyType
 */
static addBodyType(builder:flatbuffers.Builder, bodyType:reactivemarkets.papi.Body) {
  builder.addFieldInt8(1, bodyType, reactivemarkets.papi.Body.NONE);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset bodyOffset
 */
static addBody(builder:flatbuffers.Builder, bodyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, bodyOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endMessage(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RMF1');
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishSizePrefixedMessageBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, 'RMF1', true);
};

static createMessage(builder:flatbuffers.Builder, tts:flatbuffers.Long, bodyType:reactivemarkets.papi.Body, bodyOffset:flatbuffers.Offset):flatbuffers.Offset {
  Message.startMessage(builder);
  Message.addTts(builder, tts);
  Message.addBodyType(builder, bodyType);
  Message.addBody(builder, bodyOffset);
  return Message.endMessage(builder);
}
}
}
