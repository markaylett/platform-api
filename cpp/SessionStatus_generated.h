// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SESSIONSTATUS_REACTIVEMARKETS_PAPI_H_
#define FLATBUFFERS_GENERATED_SESSIONSTATUS_REACTIVEMARKETS_PAPI_H_

#include "flatbuffers/flatbuffers.h"

namespace reactivemarkets {
namespace papi {

struct SessionStatus;
struct SessionStatusBuilder;

struct SessionStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SessionStatusBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCE_TS = 4,
    VT_SOURCE = 6,
    VT_CODE = 8,
    VT_MESSAGE = 10
  };
  int64_t source_ts() const {
    return GetField<int64_t>(VT_SOURCE_TS, 0);
  }
  const flatbuffers::String *source() const {
    return GetPointer<const flatbuffers::String *>(VT_SOURCE);
  }
  int32_t code() const {
    return GetField<int32_t>(VT_CODE, 0);
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_SOURCE_TS) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyField<int32_t>(verifier, VT_CODE) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct SessionStatusBuilder {
  typedef SessionStatus Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_source_ts(int64_t source_ts) {
    fbb_.AddElement<int64_t>(SessionStatus::VT_SOURCE_TS, source_ts, 0);
  }
  void add_source(flatbuffers::Offset<flatbuffers::String> source) {
    fbb_.AddOffset(SessionStatus::VT_SOURCE, source);
  }
  void add_code(int32_t code) {
    fbb_.AddElement<int32_t>(SessionStatus::VT_CODE, code, 0);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(SessionStatus::VT_MESSAGE, message);
  }
  explicit SessionStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SessionStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SessionStatus>(end);
    return o;
  }
};

inline flatbuffers::Offset<SessionStatus> CreateSessionStatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t source_ts = 0,
    flatbuffers::Offset<flatbuffers::String> source = 0,
    int32_t code = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  SessionStatusBuilder builder_(_fbb);
  builder_.add_source_ts(source_ts);
  builder_.add_message(message);
  builder_.add_code(code);
  builder_.add_source(source);
  return builder_.Finish();
}

inline flatbuffers::Offset<SessionStatus> CreateSessionStatusDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t source_ts = 0,
    const char *source = nullptr,
    int32_t code = 0,
    const char *message = nullptr) {
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return reactivemarkets::papi::CreateSessionStatus(
      _fbb,
      source_ts,
      source__,
      code,
      message__);
}

}  // namespace papi
}  // namespace reactivemarkets

#endif  // FLATBUFFERS_GENERATED_SESSIONSTATUS_REACTIVEMARKETS_PAPI_H_
