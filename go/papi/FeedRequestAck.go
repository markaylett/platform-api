// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package papi

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FeedRequestAck struct {
	_tab flatbuffers.Table
}

func GetRootAsFeedRequestAck(buf []byte, offset flatbuffers.UOffsetT) *FeedRequestAck {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FeedRequestAck{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *FeedRequestAck) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FeedRequestAck) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FeedRequestAck) ReqId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FeedRequestAck) FeedId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FeedRequestAck) MutateFeedId(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func FeedRequestAckStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func FeedRequestAckAddReqId(builder *flatbuffers.Builder, reqId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(reqId), 0)
}
func FeedRequestAckAddFeedId(builder *flatbuffers.Builder, feedId int32) {
	builder.PrependInt32Slot(1, feedId, 0)
}
func FeedRequestAckEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
