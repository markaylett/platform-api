// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package papi

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FeedRequestReject struct {
	_tab flatbuffers.Table
}

func GetRootAsFeedRequestReject(buf []byte, offset flatbuffers.UOffsetT) *FeedRequestReject {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FeedRequestReject{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *FeedRequestReject) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FeedRequestReject) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FeedRequestReject) ReqId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FeedRequestReject) ErrorCode() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FeedRequestReject) MutateErrorCode(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *FeedRequestReject) ErrorMessage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func FeedRequestRejectStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func FeedRequestRejectAddReqId(builder *flatbuffers.Builder, reqId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(reqId), 0)
}
func FeedRequestRejectAddErrorCode(builder *flatbuffers.Builder, errorCode int32) {
	builder.PrependInt32Slot(1, errorCode, 0)
}
func FeedRequestRejectAddErrorMessage(builder *flatbuffers.Builder, errorMessage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(errorMessage), 0)
}
func FeedRequestRejectEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
