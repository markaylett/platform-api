// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PUBLICTRADE_REACTIVEMARKETS_PAPI_H_
#define FLATBUFFERS_GENERATED_PUBLICTRADE_REACTIVEMARKETS_PAPI_H_

#include "flatbuffers/flatbuffers.h"

#include "Enum_generated.h"

namespace reactivemarkets {
namespace papi {

struct PublicTrade;
struct PublicTradeBuilder;

struct PublicTrade FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PublicTradeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SOURCE_TS = 4,
    VT_SOURCE = 6,
    VT_MARKET = 8,
    VT_FEED_ID = 10,
    VT_TRADE_ID = 12,
    VT_FLAGS = 14,
    VT_SIDE = 16,
    VT_QTY = 18,
    VT_PRICE = 20,
    VT_EXEC_VENUE = 22
  };
  int64_t source_ts() const {
    return GetField<int64_t>(VT_SOURCE_TS, 0);
  }
  const flatbuffers::String *source() const {
    return GetPointer<const flatbuffers::String *>(VT_SOURCE);
  }
  const flatbuffers::String *market() const {
    return GetPointer<const flatbuffers::String *>(VT_MARKET);
  }
  int32_t feed_id() const {
    return GetField<int32_t>(VT_FEED_ID, 0);
  }
  const flatbuffers::String *trade_id() const {
    return GetPointer<const flatbuffers::String *>(VT_TRADE_ID);
  }
  uint16_t flags() const {
    return GetField<uint16_t>(VT_FLAGS, 0);
  }
  reactivemarkets::papi::Side side() const {
    return static_cast<reactivemarkets::papi::Side>(GetField<int8_t>(VT_SIDE, 0));
  }
  double qty() const {
    return GetField<double>(VT_QTY, 0.0);
  }
  double price() const {
    return GetField<double>(VT_PRICE, 0.0);
  }
  const flatbuffers::String *exec_venue() const {
    return GetPointer<const flatbuffers::String *>(VT_EXEC_VENUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_SOURCE_TS) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffsetRequired(verifier, VT_MARKET) &&
           verifier.VerifyString(market()) &&
           VerifyField<int32_t>(verifier, VT_FEED_ID) &&
           VerifyOffset(verifier, VT_TRADE_ID) &&
           verifier.VerifyString(trade_id()) &&
           VerifyField<uint16_t>(verifier, VT_FLAGS) &&
           VerifyField<int8_t>(verifier, VT_SIDE) &&
           VerifyField<double>(verifier, VT_QTY) &&
           VerifyField<double>(verifier, VT_PRICE) &&
           VerifyOffset(verifier, VT_EXEC_VENUE) &&
           verifier.VerifyString(exec_venue()) &&
           verifier.EndTable();
  }
};

struct PublicTradeBuilder {
  typedef PublicTrade Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_source_ts(int64_t source_ts) {
    fbb_.AddElement<int64_t>(PublicTrade::VT_SOURCE_TS, source_ts, 0);
  }
  void add_source(flatbuffers::Offset<flatbuffers::String> source) {
    fbb_.AddOffset(PublicTrade::VT_SOURCE, source);
  }
  void add_market(flatbuffers::Offset<flatbuffers::String> market) {
    fbb_.AddOffset(PublicTrade::VT_MARKET, market);
  }
  void add_feed_id(int32_t feed_id) {
    fbb_.AddElement<int32_t>(PublicTrade::VT_FEED_ID, feed_id, 0);
  }
  void add_trade_id(flatbuffers::Offset<flatbuffers::String> trade_id) {
    fbb_.AddOffset(PublicTrade::VT_TRADE_ID, trade_id);
  }
  void add_flags(uint16_t flags) {
    fbb_.AddElement<uint16_t>(PublicTrade::VT_FLAGS, flags, 0);
  }
  void add_side(reactivemarkets::papi::Side side) {
    fbb_.AddElement<int8_t>(PublicTrade::VT_SIDE, static_cast<int8_t>(side), 0);
  }
  void add_qty(double qty) {
    fbb_.AddElement<double>(PublicTrade::VT_QTY, qty, 0.0);
  }
  void add_price(double price) {
    fbb_.AddElement<double>(PublicTrade::VT_PRICE, price, 0.0);
  }
  void add_exec_venue(flatbuffers::Offset<flatbuffers::String> exec_venue) {
    fbb_.AddOffset(PublicTrade::VT_EXEC_VENUE, exec_venue);
  }
  explicit PublicTradeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<PublicTrade> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PublicTrade>(end);
    fbb_.Required(o, PublicTrade::VT_MARKET);
    return o;
  }
};

inline flatbuffers::Offset<PublicTrade> CreatePublicTrade(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t source_ts = 0,
    flatbuffers::Offset<flatbuffers::String> source = 0,
    flatbuffers::Offset<flatbuffers::String> market = 0,
    int32_t feed_id = 0,
    flatbuffers::Offset<flatbuffers::String> trade_id = 0,
    uint16_t flags = 0,
    reactivemarkets::papi::Side side = reactivemarkets::papi::Side::None,
    double qty = 0.0,
    double price = 0.0,
    flatbuffers::Offset<flatbuffers::String> exec_venue = 0) {
  PublicTradeBuilder builder_(_fbb);
  builder_.add_price(price);
  builder_.add_qty(qty);
  builder_.add_source_ts(source_ts);
  builder_.add_exec_venue(exec_venue);
  builder_.add_trade_id(trade_id);
  builder_.add_feed_id(feed_id);
  builder_.add_market(market);
  builder_.add_source(source);
  builder_.add_flags(flags);
  builder_.add_side(side);
  return builder_.Finish();
}

inline flatbuffers::Offset<PublicTrade> CreatePublicTradeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t source_ts = 0,
    const char *source = nullptr,
    const char *market = nullptr,
    int32_t feed_id = 0,
    const char *trade_id = nullptr,
    uint16_t flags = 0,
    reactivemarkets::papi::Side side = reactivemarkets::papi::Side::None,
    double qty = 0.0,
    double price = 0.0,
    const char *exec_venue = nullptr) {
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto market__ = market ? _fbb.CreateString(market) : 0;
  auto trade_id__ = trade_id ? _fbb.CreateString(trade_id) : 0;
  auto exec_venue__ = exec_venue ? _fbb.CreateString(exec_venue) : 0;
  return reactivemarkets::papi::CreatePublicTrade(
      _fbb,
      source_ts,
      source__,
      market__,
      feed_id,
      trade_id__,
      flags,
      side,
      qty,
      price,
      exec_venue__);
}

}  // namespace papi
}  // namespace reactivemarkets

#endif  // FLATBUFFERS_GENERATED_PUBLICTRADE_REACTIVEMARKETS_PAPI_H_
