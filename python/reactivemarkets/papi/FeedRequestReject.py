# automatically generated by the FlatBuffers compiler, do not modify

# namespace: papi

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FeedRequestReject(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFeedRequestReject(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FeedRequestReject()
        x.Init(buf, n + offset)
        return x

    # FeedRequestReject
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FeedRequestReject
    def ReqId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FeedRequestReject
    def ErrorCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FeedRequestReject
    def ErrorMessage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def FeedRequestRejectStart(builder): builder.StartObject(3)
def FeedRequestRejectAddReqId(builder, reqId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(reqId), 0)
def FeedRequestRejectAddErrorCode(builder, errorCode): builder.PrependInt32Slot(1, errorCode, 0)
def FeedRequestRejectAddErrorMessage(builder, errorMessage): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(errorMessage), 0)
def FeedRequestRejectEnd(builder): return builder.EndObject()
