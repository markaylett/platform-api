# automatically generated by the FlatBuffers compiler, do not modify

# namespace: papi

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FeedRequestAck(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFeedRequestAck(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FeedRequestAck()
        x.Init(buf, n + offset)
        return x

    # FeedRequestAck
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FeedRequestAck
    def ReqId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FeedRequestAck
    def FeedId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def FeedRequestAckStart(builder): builder.StartObject(2)
def FeedRequestAckAddReqId(builder, reqId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(reqId), 0)
def FeedRequestAckAddFeedId(builder, feedId): builder.PrependInt32Slot(1, feedId, 0)
def FeedRequestAckEnd(builder): return builder.EndObject()
