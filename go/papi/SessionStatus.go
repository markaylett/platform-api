// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package papi

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SessionStatus struct {
	_tab flatbuffers.Table
}

func GetRootAsSessionStatus(buf []byte, offset flatbuffers.UOffsetT) *SessionStatus {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SessionStatus{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SessionStatus) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SessionStatus) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SessionStatus) SourceTs() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SessionStatus) MutateSourceTs(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *SessionStatus) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SessionStatus) Code() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SessionStatus) MutateCode(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *SessionStatus) Message() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SessionStatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SessionStatusAddSourceTs(builder *flatbuffers.Builder, sourceTs int64) {
	builder.PrependInt64Slot(0, sourceTs, 0)
}
func SessionStatusAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(source), 0)
}
func SessionStatusAddCode(builder *flatbuffers.Builder, code int32) {
	builder.PrependInt32Slot(2, code, 0)
}
func SessionStatusAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(message), 0)
}
func SessionStatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
